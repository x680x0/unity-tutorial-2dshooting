// この原稿に書いていないことは説明しない！！

第４回講座敵を作る。
はじまります。

----

//前回までの進行度のプロジェクトを開く。
//今回の講座が終わった時にできているプロジェクトを開く。

前回までではこんな感じでした。

//前回までの進行度のプロジェクトは閉じない。

今回の講座ではこうなります。

//今回の講座が終わった時にできているプロジェクトを閉じる。

----

今回の講座で実装する敵と弾の仕様です。
- 敵は動かない
- 敵が弾を作る
- 弾は自機と同じy座標に生成される
- 弾は左側(x軸のマイナス方向)に等速で飛んでいく

この仕様を実装すべく、作っていきます。

----

実行時のプログラムの流れです。

//図を指しながら

敵のStart()で 事前に用意しておいた弾 を読み込む。

敵のUpdate()内で自機の位置を取得して、この情報をもとに 読み込んでおいた弾 をゲーム上に生成する。

生成された弾はその弾のUpdate()の中の横に進むという処理よって勝手に進んでいく。

----

実装の流れです。

1. **弾のひな形** の用意

1. **弾の挙動(スクリプト)** を書く

1. **敵** の用意
   これは第３回のときに準備としてやってしまいました。なので省略します。

1. **敵の挙動(スクリプト)** を書く

----

ということで、やっていきます。
まずは弾のひな形を用意します。

----

弾ではなく、弾のひな形を用意します。ここは重要です。

今まで作ってきた自機のようなオブジェクトはゲーム中に最初から存在するので、シーンビューなどにD&Dすれば作れましたが、
弾の場合はそうはいきません。

なぜか。
最初から存在するわけではなく、途中で出てくる。
たくさん出てくる。

この点が自機と異なるからです。

----

このような場合、Unityではまずひな形を作ってそのコピー品たるクローンをゲーム中に生成します。

こうすることで最初から存在するわけではなく途中からたくさん出てくる弾を実装することができるわけです。

で、そのひな形というものをUnityではPrefabと呼びます。

従って、弾のひな形を作るってのは、弾のPrefabを作ると言い換えられます。

ということで弾のPrefabを作っていきます。

----

弾のPrefabの作り方です。

1.弾に使う画像を用意します。
これはxchuの画像を用意したのと同じ手順でやります。
まず、wikiに上がっている弾の画像をDesktopあたりに保存して、Assetsにドロップします。

2.弾の画像を選択してInspectorビューのFilterModeをPointにします

3.画像をProjectからSceneにD&D

4.Hierarchyで選択して、Scaleをいじって大きくします。

5.Hierarchyで選択して右クリック、Renameで名前を分かりやすいものに変更します。
ここではbulletとなっていて、既にわかりやすい名前なので変更はしません。

ここまでは自機を作った時と一緒です。はい。ではやっていきます。

// やる。同期をとる。

現時点では、Sceneビューに弾が一つあります。

----

そうしたら、
1. Projectビューで右クリック。CreateのFolderでResourcesフォルダを作成。名前は必ずResourcesにしてください。

2. Hierarchyにある弾を先ほど作ったResourcesフォルダにD&Dします。

1. Hierarchyにある弾選択&右クリックで`Delete`


// やる。同期をとる。
// ↓やり方
1. Projectビューで右クリック。CreateのFolderでResourcesフォルダを作成。
名前は必ずResourcesにしてください。
名前を間違えているとこの後の処理でうまくいかないので、
今一度、名前があっていることを確認してください。

2. Hierarchyにある弾を先ほど作ったResourcesフォルダにD&Dします。
これで、Resourcesフォルダー内に弾のPrefabができました。

1. Hierarchyにある弾選択&右クリックで`Delete`
最後にHierarchyにある弾はもういらないので、
選択して右クリックして、Deleteします。

さきほど申しましたが、Prefabを置くフォルダの名前はResourcesにしてください。

----

Unity上の操作はCtrl+Zでやり直しできます。ただ、Projectウィンドウ上ではやり直しが効きません。注意です。

あと先ほど、右クリック+Renameで名前を変更していましたが、選択してF2キーを押すことでも名前の変更ができます。
//projectウィンドウではこれでしか名前変更できない。

----

そしてPrefabの準備つまり、弾の準備が完了しました。

皆さんの作業が追い付いたら次に進みます。
// 同期をとる。

----

ではPrefabについて少しばかり説明を。
PrefabとGameObjectは違うものです。
PrefabはGameObject+設定済みのComponentの集まりです。

この場合弾のPrefabには画像がくっついていて、このPrefabをゲーム上に生成すると最初から画像が設定されています。

この後、このPrefabにスクリプトを付けるのですが、そうするとPrefabをゲーム上に生成すると最初からスクリプトがくっついています。
この機能を使って弾を作っていくわけです。

----

さて弾のひな形の用意が完了しましたので、次は弾のスクリプトを書きます。

----

何を書けばいいかということは、実行時のプログラムの流れと、仕様のほうに書いてあって、曰く

>横に進む
>弾は左側(x軸のマイナス方向)に等速で飛んでいく。

これを満たすように作っていきます。

----

まずはスクリプトファイルを準備します。
1. Prejectウィンドウの適当なフォルダで右クリックして、
2. でてきたメニューからCreate>C# Script
3. 作られたファイルをダブルクリック。

// ↑やる。

そうするとモノデベが開きます。

----

ではWikiにあるコードをコピペしてください（笑

// 同期をとる。

ここで解説が入ります。

// コメントについて
この<不等号>で囲われた場所はコメントです。つまりないのと一緒です。
ただ、これは正しいコメントの書き方ではないです。
Wikiに上がっているのが正しい書き方なのでそこんとこよろしく。

// 解説
まずStart()がありません。Start()内でやることが特にないため、省略してしまっています。

Update()内では、まず１、２行目でfloat型変数posXとposYに弾の座標を代入しています。この時点でposXとposYに弾の座標が入ります。

次に弾の位置を計算する文がありますが、
この行では１フレームでの変位を計算して、posXに足して、弾を移動させています。変位の計算についてはこの次のスライドで解説。

そして最後の行でposXとposYの値を弾の座標に反映しています。

----

Update()は１フレームに１度実行されますが、 実は１フレームの時間間隔は一定ではない。

なので例えばUpdate()内でposX += -5f;としてしまうと、弾は等速で移動しません。

ここでTime.deltaTimeという値を参照すると1フレームの時間間隔の実測値が得られます

float型で単位は秒です。

で、変位というのは速度に変化時間を掛ければ算出できて、その変化時間が今回はTime.deltaTimeにあたります。

ということで、適当な定数を(ここでは-5fにしてますが)、Time.deltaTimeに掛ければ、等速運動が実現できて、
結局posX += -5f * Time.deltaTimeとすれば、弾が等速運動することになります。

----

かくして、弾のスクリプトが出来上がりました。

位置情報を抜き出して、
弾の変位を計算して、
適用する。


そうしたら、出来上がった弾のスクリプトをProjectウィンドウのPrefabにくっつける。

// くっつける作業を行う。やらせる。

----

本来、次は弾を撃ちだす敵の用意をするんですが、
３回講座でやったので飛ばします。

----

さて最終項目。
敵のスクリプトを書きます。

----

書くべきことは仕様と実行時のプログラムの流れに書いてあって、
仕様曰く
- 敵は動かない。
- 敵が弾を作る。
- 弾は自機と同じy座標に生成される

実行時のプログラムの流れ曰く、
`Start()`内で **事前に用意しておいた弾** を読み込む。
`Update()`内で自機の位置を取得して、
この情報をもとに **読み込んでおいた弾** をゲーム上に生成する

これを満たすべく書いていきます。
----

何はともあれ、敵用のスクリプトを用意します。

手順はスライドに示した通りです。さっきとおなじ。

// やる。

できました？

// 同期とる。

ではStart()関数から書いていきます。

----

Start()内で書くことは
事前に用意しておいた弾 を読み込むこと。

事前に用意しておいた弾というのは弾のPrefabのこと。

結局Start()内では弾のPrefabを読み込みます。

----

弾のPrefabの読み込み方ですが
Resources.Load <GameObject>(  リソースフォルダ内ので名前  );
とします。
この関数の戻り値が、弾のPrefabにあたります。
ここではGameObjectとして、弾を読み込みます。

リソースフォルダでの名前は文字列として入力します。

今回はbulletという名前なのでダブルクォーテーションでかこって
スライドのようにします。

が、これをStart関数にただ書いただけではだめでして。

----

ここでこちらをご覧ください。

//悪い例をさす
Start()内でhogeという変数が宣言されています。
C#の仕様として、
ある関数内で(Start()内で)宣言された変数は、
その関数内で(Start()内で)しか利用できません。
// ローカルな、一時的にしか使えない変数なわけですね。

//良い例をさす。
複数の関数から同じ変数を扱いたいときはよい例のように、
関数の外側に変数を置きます。

// ここに置かれた変数の事をギョーカイヨーゴでフィールドといいます。
// まあ名称は重要ではないです。置く場所が重要です。

// あ、あのこのhogeっていう変数名には、全く何の意味もないです。
// 強いて言うなら、意味がない変数名っていう意味があります。蛇足です。

----

ここでもとに戻ります。

えっと上がさっきのもので、下が正しいものです。

上だと、bulletという変数が宣言されているのがStart()内なので、
Start()内でしかbulletを参照できません。
これではまずくて、PrefabたるbulletはUpdate内で使うので、↑のやり方だとUpdate内から参照できないのです。

解決するにはさっきの例で示したように、
// 一旦スライドをバック
bulletの宣言をStartやUpdateと同じ階層に置きます。
// スライドをもとに戻す。

ここに置いた変数はStartやUpdateといった複数の関数の中から参照できます。

で、その関数の外で宣言されたbulletに対して、
Start()内で弾のPrefabをロードして代入しています。

これで弾の読み込みが完了しました。

----

で、今までのところで敵のスクリプトはこんな感じになっているので、コピペしましょう。

// 同期をとる。

今のところ、この位置にある変数bulletに
Start内で読み込んだ弾のPrefabを代入しています。

Start内でやるべきことは弾のPrefabの読み込みだけですので、
次はUpdate内の処理を書いていきます。

----

敵のUpdate内でやることは
大きく二つに分けられて、
・プレイヤーの現在位置を取得すること
・取得した現在位置の情報をもとにゲーム上に弾を生成すること。

で、プレイヤーの現在位置の取得ってのも二つの処理に分けられて、
・ゲーム上に存在する自機を取得する。
・取得した自機から位置情報を抜き出す
という処理を行います。

まずは自機の現在位置を取得していくのですが、
取り敢えずゲーム上に存在する自機を取得します。

----

ゲーム上に存在するゲームオブジェクトの取得はこの
GameObject.Find関数を用いればできます。
この関数の返り値が、そのゲームオブジェクトになります。

このヒエラルキー上の名前というのは例によってダブルクォーテーションで囲った文字列を書きます。

自機は今回はヒエラルキー上で"me"という名前なので
カッコ内に"me"を指定して、その返り値を
GameObject型のtargetという変数で受け取ります。

// なぜtargetという名前を付けたかと言いますと、敵からしたら自機は標的だからですね。分かりやすい名前を付けましょう。

そうしたらこのtargetが自機を指すことになりますので、
自機の取得が完了しました。

----

で何のために自機を取得したかって言いますと、
自機の現在位置を取得するためなので、
次は取得した自機から位置情報を抜き出します。

今回必要な情報はy座標の値だけですので先ほど取得したtargetに対して.transform.position.yとやれば取り出せます。
取り出したら適当な変数(ここではfloat型のtargetPosY)に保持します。

これで自機の現在位置の取得ができました。

----

どんどん行きます。
次は「取得したプレイヤーの現在位置の情報をもとにゲーム上に弾を生成する」
処理を行っていきます。

まずは弾の生成方法を見ていきます。

はい。ゲームオブジェクトをゲーム上に生成するにはこのInstantiate関数を使います。かっこ内に生成したいGameObject型の変数を置きます。

で先のStart内で読み込んだ弾を生成したいので、変数bulletを渡して
こうします。
これだけで、ゲーム上に弾が生成されます。

----

でもこれだと問題があります。
生成した弾が自機と同じy座標にありません。

生成されたGameObjectを取得して、
その座標を設定する処理を書きます。
これで解決できます。

で、生成されたGameObjectっていうのは
Instantiate関数の返り値となっております。

----

なのでこのスクリプトのように、Instantiate関数の返り値をGameObject型の変数cloneで受け取って、その位置を変更すれば
弾を自機のy座標に生成できます。

位置を変更する際のx座標は指定されていなかったので適当に4fにしています。
y座標は先ほど取り出した自機のy座標たるtargetPosYにしています。

----

ここまでのUpdateの中身です。
作業タイムです。wikiのを写しちゃって下さい。

// やる。

できましたか？

// 同期をとる。

そしたらこれを敵にくっつけてください。

// やる。

じゃあ、実行してみませう。
// 再生する。

突っ込みどころがありますね。

----

この原因は弾の生成間隔が非常に短いためです。

というのも現在の処理は１フレームに１個の弾を生成していて、
１秒に100フレームくらいなので、１秒間に約100この弾が生成されてるんですね。

ということで弾の生成間隔を設ける処理を追加します。
１秒に１個弾を作ることにします。

----

そしてこちらが弾を１秒に１個生成するスクリプトです。
かなり端折っているので、wikiを参照してコピペしてください。

// やる。
// 同期を取る。

解説します。

まず、前のスクリプトとの違いは
StartやUpdateと同じ階層に変数timeが宣言されていることです。

そしてStart()内ではtime変数を0で初期化する処理が追加されています。

Update()関数内ではまず変数timeに１フレームの時間間隔の実測値たるTime.deltaTimeを足しています。
そしてtimeが1f以上になったら、上のほうで解説した手順で弾をゲーム上に生成し、
最後にtimeを0にしています。

こうすることで、１秒に１個の弾を生成できます。

----

これで完成となりますので、再生してみてください

----

では今回の講座で学んだことを列挙します。

//読み上げる。

----

以上で講座を終わります。ありがとうございましたー。
分からないことあったら先輩に聞いてください。

あと、wikiの自由課題のページに課題があります。
やらなくても、次回以降の講座には影響しませんが、
ぜひチャレンジしてみてください。
